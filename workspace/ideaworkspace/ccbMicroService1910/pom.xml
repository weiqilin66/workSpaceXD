<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion> <!--pom的模型版本,规范-->

    <groupId>com.lwq</groupId><!--组和名确定唯一ID-->
    <artifactId>ccbMicroService1910</artifactId>
    <packaging>pom</packaging><!--父模块打包类型必须为pom-->
    <version>0.0.1-SNAPSHOT</version><!--0.0.1是正式版使用本地仓库不去远程仓库找最新-->
<!--引入springboot方式1-->
    <parent>
        <groupId>org.springframework.boot</groupId><!--此分组的dependency无需指定版本号由parent统一管理-->
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.1.RELEASE</version>
        <!--指定父项目pom的相对位置,默认是../pom.xml-->
        <relativePath/>
    </parent>
<!--引入springboot方式2-->
<!--当需要继承其他父项目时
使用dependencyManagement管理springboot的版本,本工程的子工程会使用该节点版本 无需显式列出版本号
统一管理版本号 可以在版本修改时,只需要修改父顶级pom的版本无需修改子工程,如果某个子工程需要使用另一版本号,在该子工程指定版本
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>2.0.4.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
 -->
    <!--maven产生的文档用-->
    <name>ccbMicroService1910</name>
    <description>Demo project for microService</description>

    <properties>
        <!--统一管理本pom各种版本属性,dependency中使用${}可引用对应节点的版本号-->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <spring-cloud.version>Hoxton.SR1</spring-cloud.version>
    </properties>

    <dependencyManagement><!--dependencyManagement统一管理cloud的所有依赖版本-->
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <!--快速将工程打包成可运行jar包-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!--读取excel文件-->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>3.17</version>
        </dependency>
        <!--导出excel文件-->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>3.17</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.10</version>
            <scope>provided</scope>
        </dependency>
        <!-- MBG -->
        <dependency>
            <groupId>org.mybatis.generator</groupId>
            <artifactId>mybatis-generator-core</artifactId>
            <version>1.3.5</version>
        </dependency>
    </dependencies>

    <modules>
        <module>lwq-common</module>
        <module>lwq-API</module>
        <module>test-demo</module>
        <module>service-system</module>
        <module>service-ribbon</module>
        <module>service-feign</module>
    </modules>



    <!--parent和dependency区别
    parent : 子项目可以使用父项目所有的dependency的依赖,不能使用父工程的类和方法
    dependency: 子项目可以使用项目所有的dependency的依赖,可以使用父项目的自己定义的类和方法-->

</project>