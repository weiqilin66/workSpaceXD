# 比 application.yml 优先级高
# server中的访问规则/{application}/{profile}/label  label可不填
# 本质:{application}匹配的是 spring.application.name
# {profile}匹配spring.cloud.config.profile
# 必须和文件名匹配
spring.application.name=client1
spring.cloud.config.profile=prod
spring.cloud.config.label=master
# config-server地址
spring.cloud.config.uri=http://localhost:8888
# 从eureka注册中心去获取
eureka.client.service-url.defaultZone=http://localhost:1111/eureka/
spring.cloud.config.discovery.enabled=true
spring.cloud.config.discovery.service-id=config-server
#
# 注意 如果cloud配置文件中已指定了server.port则以cloud配置文件为准 这里配置不生效
server.port=3222

# server 加密的信息(security)
spring.cloud.config.username=weiqilin66
spring.cloud.config.password=linweiqi45vip

# config-server能及时响应git中文件的修改 config-client中不能,添加actuator的fresh端点来处理
# 1.暴露refresh端点 2.使用到配置文件的类上加@RefreshScope
# cloud-bus代替
management.endpoints.web.exposure.include=refresh

# 请求失败重试
# 开启失败快速响应 例如读取不到@Values(${})的时候会重新加载 直到读取到
spring.cloud.config.fail-fast=true
# 最大重试次数
spring.cloud.config.retry.max-attempts= 6
# 一秒一次
spring.cloud.config.retry.initial-interval=1000
# 间隔乘数
spring.cloud.config.retry.multiplier=1.1
# 最大间隔时间5s
spring.cloud.config.retry.max-interval=5000
# rabbitmq配置
spring.rabbitmq.host=192.168.43.170
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=
# 配置instance-id http://localhost:8888/actuator/bus-refresh/{instance-id}实现单个刷新 不指定{instance-id}全部刷新
eureka.instance.instance-id=${spring.application.name}-${server.port}






