<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

<!-- 核心点:数据源,与mybatis的整合,事务控制 -->
	
	<!--  springmvc只扫描控制器  spring除此都要-->
	<context:component-scan base-package="com.crud">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<context:property-placeholder location="classpath:db.properties"/>
	
	<bean id="pooledDataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="username" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="driverClassName" value="${jdbc.driverClass}"></property>
		<property name="url" value="${jdbc.jdbcUrl}"></property>
	</bean>
	
	 <!-- mybatis整合 -->
	 <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	 	<!-- 配置mybatis的全局配置文件的位置 -->
	 	<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	 	<property name="dataSource" ref="pooledDataSource"></property>
	 	<!-- 指定mybatis的mapper文件的位置 -->
	 	<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	 </bean>
	 <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
	 	<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
	 	<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	 </bean>
	 <!-- 配置扫描器 ,将mybatis接口的实现加入到IOC容器中 -->
	 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	 <!-- 扫描所有dao接口的实现 ,加入到IOC容器   com.crud.dao包内所有的类都不用加@repository了 -->
	 	<property name="basePackage" value="com.crud.dao"></property>
	 </bean>
	 <!-- 事务管理器 -->
	 <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	 	<!-- 控制数据源 -->
	 	<property name="dataSource" ref="pooledDataSource"></property>
	 </bean>
	  <!-- mybatis整合END -->
	  
	 <!-- 开启基于注解的事务,使用xml配置形式的事务 -->
	 <aop:config>
	 <!-- 切入点 表达式 -切入哪些方法  service..表示service包下的任意子包 表示任意个数类型参数  -->
		<aop:pointcut expression="execution( * com.crud.service..*(..))" id="txPointCut"/>	 
		<!-- 配置事务增强  -切入后怎么办-->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
	 </aop:config>
	 
	 <!-- 配置事务增强,切入后怎么办- -->
	 <!--transaction-manager= 如果事务控制器名字是transactionManager  此标签可省略  -->
	 <tx:advice id="txAdvice" transaction-manager="transactionManager">
	 	<tx:attributes>
	 	<!-- 所有方法都是事务方法 -->
	 		<tx:method name="*"/>
	 		<!-- 以get开头的所有方法都是事务方法,只读 -->
	 		<tx:method name="get*" read-only="true"/>
	 	</tx:attributes>
	 </tx:advice>
	 
	 
	 
	 
	 
	 
	 
	 
</beans>
